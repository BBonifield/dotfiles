"
" General settings
"

" Set colors and fonts
set t_Co=256
set background=dark
colorscheme molokai
set guifont=mononoki:h18 " Maybe switch back to DejaVu Sans Mono someday

" Don't show the intro message when starting vim.
set shortmess=I

" Turn off wordwrap
set nowrap

" Give more context
set scrolloff=10

" Make global search default
set gdefault

" Turn off error bells
set noerrorbells visualbell t_vb=

" Customize status line
set statusline=%f\ %m%=Line\:%l/%L\ \@\ Col\:%v

" Code Style
set tabstop=2
set shiftwidth=2
set softtabstop=2

" Visual column for max line length indicator
set colorcolumn=120

" Globally ignore unhelpful folders/files
set wildignore+=*/vendor/bundle/*
set wildignore+=*/node_modules/*
set wildignore+=*/tags

"
" Plugin customizations
"

" NERDCommenter Customizations
let NERDSpaceDelims = 1

" Don't refresh NERDTree on focus gained for speed gains
autocmd! AuNERDTreeCmd FocusGained

" CtrlP Customizations
let g:ctrlp_working_path_mode = 0 " start in the current working instead of traversing up
if executable('ag')
  " use silver surfer instead of ack for speed
  let g:ackprg = 'ag --nogroup --nocolor --column'

  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_max_files = 15000
  let g:ctrlp_max_height = 20
  let g:ctrlp_use_caching = 0
endif

" Link syntastic to rbenv ruby
let g:syntastic_ruby_exec = '/usr/local/var/rbenv/shims/ruby'

" Dispatch test runs into a shell
let g:vroom_use_dispatch = 1
let g:vroom_clear_screen = 0

" Turn off vim-ruby balloonexpr
if has("gui_running")
  setlocal balloonexpr=
endif

"
" Helpers/aliases customizations
"

" CtrlP aliasing
map <C-t> :CtrlP<CR>
map <D-t> :CtrlP<CR>

" Easy insert mode exit
inoremap jj <Esc>

" Select last pasted block
nnoremap gp `[v`]

" Focus opened file in nerdtree
nmap ,nf :NERDTreeFind<CR>

" Faster file movement
map <Space> 20j
map <BS> 20k

" Faster pane movement
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Move lines up/down
nnoremap <A-j> :m+<CR>==
nnoremap <A-k> :m-2<CR>==
inoremap <A-j> <Esc>:m+<CR>==gi
inoremap <A-k> <Esc>:m-2<CR>==gi
vnoremap <A-j> :m'>+<CR>gv=gv
vnoremap <A-k> :m-2<CR>gv=gv

" Copy current filename to system clipboard
nnoremap <Leader>cf :let @*=expand("%:t")<cr>:echo "Copied file name to clipboard"<cr>
" Copy current buffer path relative to root of VIM session to system clipboard
nnoremap <Leader>cp :let @*=expand("%")<cr>:echo "Copied file path to clipboard"<cr>

" Turn off focusing
nnoremap <Leader>ff :%s/, \(focus: true\\|:focus\)//<cr>:noh<cr>

" render markdown preview
map <silent> <Leader>md :silent w !ruby -e 'require "rubygems"; require "kramdown"; require "erb"; body = Kramdown::Document.new(STDIN.read.chomp, input: "GFM", hard_wrap: false).to_html; print ERB.new(File.read(Dir.home + "/.vim-support/kramdown.html.erb")).result(binding)' > /tmp/mdresult.html; open /tmp/mdresult.html<CR>

" `:R {command}` to open the output of a command in a scratch buffer (e.g. `:R ls`)
command! -nargs=* -complete=shellcmd R new | setlocal buftype=nofile bufhidden=hide noswapfile | r !<args>

" ctags generation helper
nnoremap <Leader>tg :!if [ -f .ctagignore ] ; then CTAGIGNORE="--exclude=@.ctagignore" ; fi; ctags -R --exclude=.git --exclude=node_modules node_cache jspm_packages $CTAGIGNORE .<CR>

" Force saving files that require root permission 
cnoremap w!! w !sudo tee > /dev/null %

" Open the GitHub Desktop app
map <silent> <Leader>gh :silent !github<CR>

" Copy current node filename to system clipboard
call NERDTreeAddKeyMap({
  \ 'key': ',cf',
  \ 'callback': 'NERDTreeCopyNodePath',
  \ 'quickhelpText': 'put full path of current node into the system clipboard' })

function! NERDTreeCopyNodePath()
  let n = g:NERDTreeFileNode.GetSelected()
  if n != {}
    let @*=n.path.str()
    echo "Copied file name to clipboard"
  endif
endfunction

" Copy current node path relative to root of VIM session to system clipboard
call NERDTreeAddKeyMap({
  \ 'key': ',cp',
  \ 'callback': 'NERDTreeCopyRelativeNodePath',
  \ 'quickhelpText': 'put full path of current node into the system clipboard' })

function! NERDTreeCopyRelativeNodePath()
  let n = g:NERDTreeFileNode.GetSelected()
  if n != {}
    let @*=fnamemodify(n.path.str(), ':.')
    echo "Copied file path to clipboard"
  endif
endfunction

" Configure syntastic to use checkers
let g:syntastic_javascript_checkers=['eslint']
let g:syntastic_ruby_checkers=['rubocop']

" Run syntastic on the current file
nnoremap <Leader>rc :SyntasticCheck<CR>
